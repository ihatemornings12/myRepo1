//
// Generated file, do not edit! Created by nedtool 4.6 from transport/rtp/profiles/avprofile/RTPMpegPacket.msg.
//

#ifndef _RTPMPEGPACKET_M_H_
#define _RTPMPEGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



/**
 * Class generated from <tt>transport/rtp/profiles/avprofile/RTPMpegPacket.msg:33</tt> by nedtool.
 * <pre>
 * //
 * // An ~RTPMpegPacket is intended to be capsulated into an ~RTPPacket when
 * // transmitting mpeg data with rtp under the rtp audio/video profile.
 * // It stores information about the mpeg data as described in rfc 2250.
 * // This implementation doesn't transport real mpeg data. It is intended
 * // to simulate storing mpeg data by adding length.
 * // Currently only one header field (picture type) is filled with the right
 * // value. The values for the other header fields can't be determined by
 * // reading the gdf file.
 * //
 * // @see ~RTPAVProfilePayload32Sender
 * // @see ~RTPAVProfilePayload32Receiver
 * //
 * packet RTPMpegPacket
 * {
 *     int headerLength = 4;
 *     int payloadLength; // size of the mpeg data
 *     int pictureType;   // picture type of the frame the data in this packet belongs to.
 * 
 *     // currenrtly unused fields:
 *     //int mzb;
 *     //int two;
 *     //int temporalReference;
 *     //int activeN;
 *     //int newPictureHeader;
 *     //int sequenceHeaderPresent;
 *     //int beginningOfSlice;
 *     //int endOfSlice;
 *     //int fbv;
 *     //int bfc;
 *     //int ffv;
 *     //int ffc;
 * }
 * </pre>
 */
class INET_API RTPMpegPacket : public ::cPacket
{
  protected:
    int headerLength_var;
    int payloadLength_var;
    int pictureType_var;

  private:
    void copy(const RTPMpegPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTPMpegPacket&);

  public:
    RTPMpegPacket(const char *name=NULL, int kind=0);
    RTPMpegPacket(const RTPMpegPacket& other);
    virtual ~RTPMpegPacket();
    RTPMpegPacket& operator=(const RTPMpegPacket& other);
    virtual RTPMpegPacket *dup() const {return new RTPMpegPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);
    virtual int getPayloadLength() const;
    virtual void setPayloadLength(int payloadLength);
    virtual int getPictureType() const;
    virtual void setPictureType(int pictureType);
};

inline void doPacking(cCommBuffer *b, RTPMpegPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RTPMpegPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _RTPMPEGPACKET_M_H_

