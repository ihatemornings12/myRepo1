//
// Generated file, do not edit! Created by nedtool 4.6 from transport/rtp/RTCPPacket3.msg.
//

#ifndef _RTCPPACKET3_M_H_
#define _RTCPPACKET3_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "RTCPPacket2.h"
#include "reports.h"
#include "sdes.h"
// }}

/**
 * Class generated from <tt>transport/rtp/RTCPPacket3.msg:30</tt> by nedtool.
 * <pre>
 * packet RTCPSenderReportPacket extends RTCPReceiverReportPacket
 * {
 *     packetType = RTCP_PT_SR;
 *     @customize(true);  // see the generated C++ header for more info
 *     SenderReport senderReport;
 * }
 * </pre>
 *
 * RTCPSenderReportPacket_Base is only useful if it gets subclassed, and RTCPSenderReportPacket is derived from it.
 * The minimum code to be written for RTCPSenderReportPacket is the following:
 *
 * <pre>
 * class INET_API RTCPSenderReportPacket : public RTCPSenderReportPacket_Base
 * {
 *   private:
 *     void copy(const RTCPSenderReportPacket& other) { ... }

 *   public:
 *     RTCPSenderReportPacket(const char *name=NULL, int kind=0) : RTCPSenderReportPacket_Base(name,kind) {}
 *     RTCPSenderReportPacket(const RTCPSenderReportPacket& other) : RTCPSenderReportPacket_Base(other) {copy(other);}
 *     RTCPSenderReportPacket& operator=(const RTCPSenderReportPacket& other) {if (this==&other) return *this; RTCPSenderReportPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RTCPSenderReportPacket *dup() const {return new RTCPSenderReportPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RTCPSenderReportPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RTCPSenderReportPacket);
 * </pre>
 */
class INET_API RTCPSenderReportPacket_Base : public ::RTCPReceiverReportPacket
{
  protected:
    SenderReport senderReport_var;

  private:
    void copy(const RTCPSenderReportPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTCPSenderReportPacket_Base&);
    // make constructors protected to avoid instantiation
    RTCPSenderReportPacket_Base(const char *name=NULL, int kind=0);
    RTCPSenderReportPacket_Base(const RTCPSenderReportPacket_Base& other);
    // make assignment operator protected to force the user override it
    RTCPSenderReportPacket_Base& operator=(const RTCPSenderReportPacket_Base& other);

  public:
    virtual ~RTCPSenderReportPacket_Base();
    virtual RTCPSenderReportPacket_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class RTCPSenderReportPacket");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual SenderReport& getSenderReport();
    virtual const SenderReport& getSenderReport() const {return const_cast<RTCPSenderReportPacket_Base*>(this)->getSenderReport();}
    virtual void setSenderReport(const SenderReport& senderReport);
};


#endif // ifndef _RTCPPACKET3_M_H_

