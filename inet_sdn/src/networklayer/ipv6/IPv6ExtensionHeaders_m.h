//
// Generated file, do not edit! Created by nedtool 4.6 from networklayer/ipv6/IPv6ExtensionHeaders.msg.
//

#ifndef _IPV6EXTENSIONHEADERS_M_H_
#define _IPV6EXTENSIONHEADERS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "IPv6Address.h"
#include "IPv6Datagram.h"
#include "IPProtocolId_m.h"

#define IPv6_FRAGMENT_HEADER_LENGTH 8
// }}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:39</tt> by nedtool.
 * <pre>
 * //
 * // Hop-by-Hop Options Header.
 * // RFC 2460 Section 4.3
 * // Next Header Value: 0
 * //
 * class IPv6HopByHopOptionsHeader extends IPv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_HOP;
 *     byteLength = 8; // FIXME verify
 * }
 * </pre>
 */
class INET_API IPv6HopByHopOptionsHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6HopByHopOptionsHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6HopByHopOptionsHeader&);

  public:
    IPv6HopByHopOptionsHeader();
    IPv6HopByHopOptionsHeader(const IPv6HopByHopOptionsHeader& other);
    virtual ~IPv6HopByHopOptionsHeader();
    IPv6HopByHopOptionsHeader& operator=(const IPv6HopByHopOptionsHeader& other);
    virtual IPv6HopByHopOptionsHeader *dup() const {return new IPv6HopByHopOptionsHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6HopByHopOptionsHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6HopByHopOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:50</tt> by nedtool.
 * <pre>
 * //
 * // Routing Header
 * // RFC 2460 Section 4.4
 * // Next Header Value: 43
 * //
 * class IPv6RoutingHeader extends IPv6ExtensionHeader
 * {
 *     @customize(true);
 *     extensionType = IP_PROT_IPv6EXT_ROUTING;
 *     byteLength = 8;
 *     //byteLength = 8+16*getAddressArraySize() when routingType == 0
 *     uint8 routingType;
 *     uint8 segmentsLeft;
 *     IPv6Address address[];
 * }
 * </pre>
 *
 * IPv6RoutingHeader_Base is only useful if it gets subclassed, and IPv6RoutingHeader is derived from it.
 * The minimum code to be written for IPv6RoutingHeader is the following:
 *
 * <pre>
 * class INET_API IPv6RoutingHeader : public IPv6RoutingHeader_Base
 * {
 *   private:
 *     void copy(const IPv6RoutingHeader& other) { ... }

 *   public:
 *     IPv6RoutingHeader() : IPv6RoutingHeader_Base() {}
 *     IPv6RoutingHeader(const IPv6RoutingHeader& other) : IPv6RoutingHeader_Base(other) {copy(other);}
 *     IPv6RoutingHeader& operator=(const IPv6RoutingHeader& other) {if (this==&other) return *this; IPv6RoutingHeader_Base::operator=(other); copy(other); return *this;}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from IPv6RoutingHeader_Base
 * };
 * </pre>
 */
class INET_API IPv6RoutingHeader_Base : public ::IPv6ExtensionHeader
{
  protected:
    uint8 routingType_var;
    uint8 segmentsLeft_var;
    IPv6Address *address_var; // array ptr
    unsigned int address_arraysize;

  private:
    void copy(const IPv6RoutingHeader_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6RoutingHeader_Base&);
    // make constructors protected to avoid instantiation
    IPv6RoutingHeader_Base();
    IPv6RoutingHeader_Base(const IPv6RoutingHeader_Base& other);
    // make assignment operator protected to force the user override it
    IPv6RoutingHeader_Base& operator=(const IPv6RoutingHeader_Base& other);

  public:
    virtual ~IPv6RoutingHeader_Base();
    virtual IPv6RoutingHeader_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class IPv6RoutingHeader");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8 getRoutingType() const;
    virtual void setRoutingType(uint8 routingType);
    virtual uint8 getSegmentsLeft() const;
    virtual void setSegmentsLeft(uint8 segmentsLeft);
    virtual void setAddressArraySize(unsigned int size);
    virtual unsigned int getAddressArraySize() const;
    virtual IPv6Address& getAddress(unsigned int k);
    virtual const IPv6Address& getAddress(unsigned int k) const {return const_cast<IPv6RoutingHeader_Base*>(this)->getAddress(k);}
    virtual void setAddress(unsigned int k, const IPv6Address& address);
};

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:66</tt> by nedtool.
 * <pre>
 * //
 * // Fragment Header
 * // RFC 2460 Section 4.5
 * // Next Header Value: 44
 * //
 * class IPv6FragmentHeader extends IPv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_FRAGMENT;
 *     byteLength = IPv6_FRAGMENT_HEADER_LENGTH; // FIXME verify
 *     unsigned short fragmentOffset;
 *     unsigned int identification;  // datagram ID: identifies which datagram this fragment belongs to.
 *     bool moreFragments; //Is this the last fragment?
 * }
 * </pre>
 */
class INET_API IPv6FragmentHeader : public ::IPv6ExtensionHeader
{
  protected:
    unsigned short fragmentOffset_var;
    unsigned int identification_var;
    bool moreFragments_var;

  private:
    void copy(const IPv6FragmentHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6FragmentHeader&);

  public:
    IPv6FragmentHeader();
    IPv6FragmentHeader(const IPv6FragmentHeader& other);
    virtual ~IPv6FragmentHeader();
    IPv6FragmentHeader& operator=(const IPv6FragmentHeader& other);
    virtual IPv6FragmentHeader *dup() const {return new IPv6FragmentHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getFragmentOffset() const;
    virtual void setFragmentOffset(unsigned short fragmentOffset);
    virtual unsigned int getIdentification() const;
    virtual void setIdentification(unsigned int identification);
    virtual bool getMoreFragments() const;
    virtual void setMoreFragments(bool moreFragments);
};

inline void doPacking(cCommBuffer *b, IPv6FragmentHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6FragmentHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:80</tt> by nedtool.
 * <pre>
 * //
 * // Destination Options Header
 * // RFC 2460 Section 4.6
 * // Next Header Value: 60
 * //
 * class IPv6DestinationOptionsHeader extends IPv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_DEST;
 *     byteLength = 8; // FIXME verify
 *     // byteLength = 20; // FIXME only valid for Home Address Option!
 * }
 * </pre>
 */
class INET_API IPv6DestinationOptionsHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6DestinationOptionsHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6DestinationOptionsHeader&);

  public:
    IPv6DestinationOptionsHeader();
    IPv6DestinationOptionsHeader(const IPv6DestinationOptionsHeader& other);
    virtual ~IPv6DestinationOptionsHeader();
    IPv6DestinationOptionsHeader& operator=(const IPv6DestinationOptionsHeader& other);
    virtual IPv6DestinationOptionsHeader *dup() const {return new IPv6DestinationOptionsHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6DestinationOptionsHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6DestinationOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:92</tt> by nedtool.
 * <pre>
 * //
 * // Authentication Header
 * // RFC 2402
 * // Not Implemented
 * //
 * class IPv6AuthenticationHeader extends IPv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_AUTH;
 *     byteLength = 8; // FIXME verify
 * }
 * </pre>
 */
class INET_API IPv6AuthenticationHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6AuthenticationHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6AuthenticationHeader&);

  public:
    IPv6AuthenticationHeader();
    IPv6AuthenticationHeader(const IPv6AuthenticationHeader& other);
    virtual ~IPv6AuthenticationHeader();
    IPv6AuthenticationHeader& operator=(const IPv6AuthenticationHeader& other);
    virtual IPv6AuthenticationHeader *dup() const {return new IPv6AuthenticationHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6AuthenticationHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6AuthenticationHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/ipv6/IPv6ExtensionHeaders.msg:103</tt> by nedtool.
 * <pre>
 * //
 * // Encapsulating Security Payload Header
 * // RFC 2406
 * // Not Implemented
 * //
 * class IPv6EncapsulatingSecurityPayloadHeader extends IPv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_ESP;
 *     byteLength = 8; // FIXME verify
 * }
 * </pre>
 */
class INET_API IPv6EncapsulatingSecurityPayloadHeader : public ::IPv6ExtensionHeader
{
  protected:

  private:
    void copy(const IPv6EncapsulatingSecurityPayloadHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6EncapsulatingSecurityPayloadHeader&);

  public:
    IPv6EncapsulatingSecurityPayloadHeader();
    IPv6EncapsulatingSecurityPayloadHeader(const IPv6EncapsulatingSecurityPayloadHeader& other);
    virtual ~IPv6EncapsulatingSecurityPayloadHeader();
    IPv6EncapsulatingSecurityPayloadHeader& operator=(const IPv6EncapsulatingSecurityPayloadHeader& other);
    virtual IPv6EncapsulatingSecurityPayloadHeader *dup() const {return new IPv6EncapsulatingSecurityPayloadHeader(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimUnpack(b);}


#endif // ifndef _IPV6EXTENSIONHEADERS_M_H_

