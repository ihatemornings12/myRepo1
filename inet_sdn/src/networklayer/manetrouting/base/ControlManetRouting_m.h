//
// Generated file, do not edit! Created by nedtool 4.6 from networklayer/manetrouting/base/ControlManetRouting.msg.
//

#ifndef _CONTROLMANETROUTING_M_H_
#define _CONTROLMANETROUTING_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "ManetAddress.h"
// }}

/**
 * Enum generated from <tt>networklayer/manetrouting/base/ControlManetRouting.msg:27</tt> by nedtool.
 * <pre>
 * enum ManetControlType
 * {
 * 
 *     MANET_ROUTE_NO_OPTION = 0;
 *     MANET_ROUTE_UPDATE = 1;
 *     MANET_ROUTE_NOROUTE = 2;
 * }
 * </pre>
 */
enum ManetControlType {
    MANET_ROUTE_NO_OPTION = 0,
    MANET_ROUTE_UPDATE = 1,
    MANET_ROUTE_NOROUTE = 2
};

/**
 * Class generated from <tt>networklayer/manetrouting/base/ControlManetRouting.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // ICMP message class
 * //
 * packet ControlManetRouting
 * {
 *     ManetAddress srcAddress;
 *     ManetAddress destAddress;
 *     int optionCode @enum(ManetControlType) = MANET_ROUTE_NO_OPTION;
 * }
 * </pre>
 */
class INET_API ControlManetRouting : public ::cPacket
{
  protected:
    ManetAddress srcAddress_var;
    ManetAddress destAddress_var;
    int optionCode_var;

  private:
    void copy(const ControlManetRouting& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ControlManetRouting&);

  public:
    ControlManetRouting(const char *name=NULL, int kind=0);
    ControlManetRouting(const ControlManetRouting& other);
    virtual ~ControlManetRouting();
    ControlManetRouting& operator=(const ControlManetRouting& other);
    virtual ControlManetRouting *dup() const {return new ControlManetRouting(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual ManetAddress& getSrcAddress();
    virtual const ManetAddress& getSrcAddress() const {return const_cast<ControlManetRouting*>(this)->getSrcAddress();}
    virtual void setSrcAddress(const ManetAddress& srcAddress);
    virtual ManetAddress& getDestAddress();
    virtual const ManetAddress& getDestAddress() const {return const_cast<ControlManetRouting*>(this)->getDestAddress();}
    virtual void setDestAddress(const ManetAddress& destAddress);
    virtual int getOptionCode() const;
    virtual void setOptionCode(int optionCode);
};

inline void doPacking(cCommBuffer *b, ControlManetRouting& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ControlManetRouting& obj) {obj.parsimUnpack(b);}


#endif // ifndef _CONTROLMANETROUTING_M_H_

