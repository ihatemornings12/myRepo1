//
// Generated file, do not edit! Created by nedtool 4.6 from networklayer/routing/gpsr/GPSR.msg.
//

#ifndef _GPSR_M_H_
#define _GPSR_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "IPvXAddress.h"
#include "Coord.h"
#include "GPSRDefs.h"
// }}

/**
 * Class generated from <tt>networklayer/routing/gpsr/GPSR.msg:35</tt> by nedtool.
 * <pre>
 * //
 * // The GPSR beacon packet is sent periodically by all GPSR routers to notify
 * // the neighbors about the router's address and position. 
 * //
 * packet GPSRBeacon
 * {
 *     IPvXAddress address;
 *     Coord position;
 * }
 * </pre>
 */
class INET_API GPSRBeacon : public ::cPacket
{
  protected:
    IPvXAddress address_var;
    Coord position_var;

  private:
    void copy(const GPSRBeacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GPSRBeacon&);

  public:
    GPSRBeacon(const char *name=NULL, int kind=0);
    GPSRBeacon(const GPSRBeacon& other);
    virtual ~GPSRBeacon();
    GPSRBeacon& operator=(const GPSRBeacon& other);
    virtual GPSRBeacon *dup() const {return new GPSRBeacon(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getAddress();
    virtual const IPvXAddress& getAddress() const {return const_cast<GPSRBeacon*>(this)->getAddress();}
    virtual void setAddress(const IPvXAddress& address);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<GPSRBeacon*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
};

inline void doPacking(cCommBuffer *b, GPSRBeacon& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GPSRBeacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/routing/gpsr/GPSR.msg:49</tt> by nedtool.
 * <pre>
 * //
 * // The GPSR packet is used to add extra routing information for network datagrams.
 * //
 * // KLUDGE: this packet is now used to wrap the content of  network datagram
 * // KLUDGE: we should rather add these fields as header extensions
 * //
 * // For more information, see the GPSR paper
 * // http://www.eecs.harvard.edu/~htk/publication/2000-mobi-karp-kung.pdf
 * //
 * packet GPSRPacket
 * {
 *     GPSRForwardingMode routingMode;
 *     Coord destinationPosition;               // D
 *     Coord perimeterRoutingStartPosition;     // Lp
 *     Coord perimeterRoutingForwardPosition;   // Lf
 *     IPvXAddress currentFaceFirstSenderAddress;   // e0
 *     IPvXAddress currentFaceFirstReceiverAddress; // e0
 *     IPvXAddress senderAddress; // TODO: this field is not strictly needed by GPSR (should be eliminated)
 * }
 * </pre>
 */
class INET_API GPSRPacket : public ::cPacket
{
  protected:
    GPSRForwardingMode routingMode_var;
    Coord destinationPosition_var;
    Coord perimeterRoutingStartPosition_var;
    Coord perimeterRoutingForwardPosition_var;
    IPvXAddress currentFaceFirstSenderAddress_var;
    IPvXAddress currentFaceFirstReceiverAddress_var;
    IPvXAddress senderAddress_var;

  private:
    void copy(const GPSRPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GPSRPacket&);

  public:
    GPSRPacket(const char *name=NULL, int kind=0);
    GPSRPacket(const GPSRPacket& other);
    virtual ~GPSRPacket();
    GPSRPacket& operator=(const GPSRPacket& other);
    virtual GPSRPacket *dup() const {return new GPSRPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual GPSRForwardingMode& getRoutingMode();
    virtual const GPSRForwardingMode& getRoutingMode() const {return const_cast<GPSRPacket*>(this)->getRoutingMode();}
    virtual void setRoutingMode(const GPSRForwardingMode& routingMode);
    virtual Coord& getDestinationPosition();
    virtual const Coord& getDestinationPosition() const {return const_cast<GPSRPacket*>(this)->getDestinationPosition();}
    virtual void setDestinationPosition(const Coord& destinationPosition);
    virtual Coord& getPerimeterRoutingStartPosition();
    virtual const Coord& getPerimeterRoutingStartPosition() const {return const_cast<GPSRPacket*>(this)->getPerimeterRoutingStartPosition();}
    virtual void setPerimeterRoutingStartPosition(const Coord& perimeterRoutingStartPosition);
    virtual Coord& getPerimeterRoutingForwardPosition();
    virtual const Coord& getPerimeterRoutingForwardPosition() const {return const_cast<GPSRPacket*>(this)->getPerimeterRoutingForwardPosition();}
    virtual void setPerimeterRoutingForwardPosition(const Coord& perimeterRoutingForwardPosition);
    virtual IPvXAddress& getCurrentFaceFirstSenderAddress();
    virtual const IPvXAddress& getCurrentFaceFirstSenderAddress() const {return const_cast<GPSRPacket*>(this)->getCurrentFaceFirstSenderAddress();}
    virtual void setCurrentFaceFirstSenderAddress(const IPvXAddress& currentFaceFirstSenderAddress);
    virtual IPvXAddress& getCurrentFaceFirstReceiverAddress();
    virtual const IPvXAddress& getCurrentFaceFirstReceiverAddress() const {return const_cast<GPSRPacket*>(this)->getCurrentFaceFirstReceiverAddress();}
    virtual void setCurrentFaceFirstReceiverAddress(const IPvXAddress& currentFaceFirstReceiverAddress);
    virtual IPvXAddress& getSenderAddress();
    virtual const IPvXAddress& getSenderAddress() const {return const_cast<GPSRPacket*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const IPvXAddress& senderAddress);
};

inline void doPacking(cCommBuffer *b, GPSRPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GPSRPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GPSR_M_H_

