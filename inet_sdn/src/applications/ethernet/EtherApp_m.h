//
// Generated file, do not edit! Created by nedtool 4.6 from applications/ethernet/EtherApp.msg.
//

#ifndef _ETHERAPP_M_H_
#define _ETHERAPP_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "INETDefs.h"

#define ETHERAPP_CLI_SAP  0xf0
#define ETHERAPP_SRV_SAP  0xf1
// }}

/**
 * Class generated from <tt>applications/ethernet/EtherApp.msg:33</tt> by nedtool.
 * <pre>
 * //
 * // Request packet sent by ~EtherAppCli. Contains the number of bytes to be
 * // sent back as response; if this value is greater than ~1400, the reply
 * // will consist of several Ethernet frames. See also ~EtherAppResp.
 * //
 * packet EtherAppReq
 * {
 *     long requestId;
 *     long responseBytes;
 * }
 * </pre>
 */
class INET_API EtherAppReq : public ::cPacket
{
  protected:
    long requestId_var;
    long responseBytes_var;

  private:
    void copy(const EtherAppReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherAppReq&);

  public:
    EtherAppReq(const char *name=NULL, int kind=0);
    EtherAppReq(const EtherAppReq& other);
    virtual ~EtherAppReq();
    EtherAppReq& operator=(const EtherAppReq& other);
    virtual EtherAppReq *dup() const {return new EtherAppReq(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getRequestId() const;
    virtual void setRequestId(long requestId);
    virtual long getResponseBytes() const;
    virtual void setResponseBytes(long responseBytes);
};

inline void doPacking(cCommBuffer *b, EtherAppReq& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EtherAppReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/ethernet/EtherApp.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Packet sent back by ~EtherAppSrv in response to an ~EtherAppReq.
 * //
 * packet EtherAppResp
 * {
 *     int requestId;
 *     int numFrames;
 * }
 * </pre>
 */
class INET_API EtherAppResp : public ::cPacket
{
  protected:
    int requestId_var;
    int numFrames_var;

  private:
    void copy(const EtherAppResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherAppResp&);

  public:
    EtherAppResp(const char *name=NULL, int kind=0);
    EtherAppResp(const EtherAppResp& other);
    virtual ~EtherAppResp();
    EtherAppResp& operator=(const EtherAppResp& other);
    virtual EtherAppResp *dup() const {return new EtherAppResp(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
    virtual int getNumFrames() const;
    virtual void setNumFrames(int numFrames);
};

inline void doPacking(cCommBuffer *b, EtherAppResp& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EtherAppResp& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ETHERAPP_M_H_

