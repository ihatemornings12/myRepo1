//
// Generated file, do not edit! Created by nedtool 4.6 from applications/trafficlightapp/TrafficLightPacket.msg.
//

#ifndef _TRAFFICLIGHTPACKET_M_H_
#define _TRAFFICLIGHTPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "INETDefs.h"
// }}

/**
 * Class generated from <tt>applications/trafficlightapp/TrafficLightPacket.msg:9</tt> by nedtool.
 * <pre>
 * packet TrafficLightBase
 * {
 * }
 * </pre>
 */
class INET_API TrafficLightBase : public ::cPacket
{
  protected:

  private:
    void copy(const TrafficLightBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TrafficLightBase&);

  public:
    TrafficLightBase(const char *name=NULL, int kind=0);
    TrafficLightBase(const TrafficLightBase& other);
    virtual ~TrafficLightBase();
    TrafficLightBase& operator=(const TrafficLightBase& other);
    virtual TrafficLightBase *dup() const {return new TrafficLightBase(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, TrafficLightBase& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TrafficLightBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/trafficlightapp/TrafficLightPacket.msg:13</tt> by nedtool.
 * <pre>
 * packet TrafficLightStatus extends TrafficLightBase
 * {
 *     double time;
 *     string roadType;
 *     double periodGreen;
 *     double periodYellow;
 *     double periodRed;
 * }
 * </pre>
 */
class INET_API TrafficLightStatus : public ::TrafficLightBase
{
  protected:
    double time_var;
    opp_string roadType_var;
    double periodGreen_var;
    double periodYellow_var;
    double periodRed_var;

  private:
    void copy(const TrafficLightStatus& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TrafficLightStatus&);

  public:
    TrafficLightStatus(const char *name=NULL, int kind=0);
    TrafficLightStatus(const TrafficLightStatus& other);
    virtual ~TrafficLightStatus();
    TrafficLightStatus& operator=(const TrafficLightStatus& other);
    virtual TrafficLightStatus *dup() const {return new TrafficLightStatus(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getTime() const;
    virtual void setTime(double time);
    virtual const char * getRoadType() const;
    virtual void setRoadType(const char * roadType);
    virtual double getPeriodGreen() const;
    virtual void setPeriodGreen(double periodGreen);
    virtual double getPeriodYellow() const;
    virtual void setPeriodYellow(double periodYellow);
    virtual double getPeriodRed() const;
    virtual void setPeriodRed(double periodRed);
};

inline void doPacking(cCommBuffer *b, TrafficLightStatus& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TrafficLightStatus& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/trafficlightapp/TrafficLightPacket.msg:21</tt> by nedtool.
 * <pre>
 * packet TrafficLightCmd extends TrafficLightBase
 * {
 *     long sequenceNumber;
 *     double periodGreen;
 *     double periodYellow;
 *     double periodRed;
 * 
 * }
 * </pre>
 */
class INET_API TrafficLightCmd : public ::TrafficLightBase
{
  protected:
    long sequenceNumber_var;
    double periodGreen_var;
    double periodYellow_var;
    double periodRed_var;

  private:
    void copy(const TrafficLightCmd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TrafficLightCmd&);

  public:
    TrafficLightCmd(const char *name=NULL, int kind=0);
    TrafficLightCmd(const TrafficLightCmd& other);
    virtual ~TrafficLightCmd();
    TrafficLightCmd& operator=(const TrafficLightCmd& other);
    virtual TrafficLightCmd *dup() const {return new TrafficLightCmd(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getSequenceNumber() const;
    virtual void setSequenceNumber(long sequenceNumber);
    virtual double getPeriodGreen() const;
    virtual void setPeriodGreen(double periodGreen);
    virtual double getPeriodYellow() const;
    virtual void setPeriodYellow(double periodYellow);
    virtual double getPeriodRed() const;
    virtual void setPeriodRed(double periodRed);
};

inline void doPacking(cCommBuffer *b, TrafficLightCmd& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TrafficLightCmd& obj) {obj.parsimUnpack(b);}


#endif // ifndef _TRAFFICLIGHTPACKET_M_H_

