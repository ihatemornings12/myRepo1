//
// Generated file, do not edit! Created by nedtool 4.6 from ofomnet/openflow/messages/OFP_Port_Status.msg.
//

#ifndef _OFP_PORT_STATUS_M_H_
#define _OFP_PORT_STATUS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
    #include "openflow.h"
    #include "Open_Flow_Message_m.h"
// }}

/**
 * Class generated from <tt>ofomnet/openflow/messages/OFP_Port_Status.msg:10</tt> by nedtool.
 * <pre>
 * packet OFP_Port_Status extends Open_Flow_Message
 * {
 *     ofp_port_status port_status;
 *     uint8_t reason;
 *     int datapath_Id;
 * }
 * </pre>
 */
class INET_API OFP_Port_Status : public ::Open_Flow_Message
{
  protected:
    ofp_port_status port_status_var;
    uint8_t reason_var;
    int datapath_Id_var;

  private:
    void copy(const OFP_Port_Status& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Port_Status&);

  public:
    OFP_Port_Status(const char *name=NULL, int kind=0);
    OFP_Port_Status(const OFP_Port_Status& other);
    virtual ~OFP_Port_Status();
    OFP_Port_Status& operator=(const OFP_Port_Status& other);
    virtual OFP_Port_Status *dup() const {return new OFP_Port_Status(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual ofp_port_status& getPort_status();
    virtual const ofp_port_status& getPort_status() const {return const_cast<OFP_Port_Status*>(this)->getPort_status();}
    virtual void setPort_status(const ofp_port_status& port_status);
    virtual uint8_t getReason() const;
    virtual void setReason(uint8_t reason);
    virtual int getDatapath_Id() const;
    virtual void setDatapath_Id(int datapath_Id);
};

inline void doPacking(cCommBuffer *b, OFP_Port_Status& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OFP_Port_Status& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OFP_PORT_STATUS_M_H_

