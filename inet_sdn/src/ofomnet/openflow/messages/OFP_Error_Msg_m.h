//
// Generated file, do not edit! Created by nedtool 4.6 from ofomnet/openflow/messages/OFP_Error_Msg.msg.
//

#ifndef _OFP_ERROR_MSG_M_H_
#define _OFP_ERROR_MSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
    #include "openflow.h"
    #include "Open_Flow_Message_m.h"
// }}

/**
 * Class generated from <tt>ofomnet/openflow/messages/OFP_Error_Msg.msg:24</tt> by nedtool.
 * <pre>
 * packet OFP_Error_Msg extends Open_Flow_Message
 * {
 *     uint16_t type;
 *     uint16_t code;
 *     //uint8_t data[64]; //Variable-length data.  Interpreted based on the type and code. 
 *                     // OFPET_FLOW_MOD_FAILED: The data field contains at least 64 bytes of the failed request.
 * }
 * </pre>
 */
class INET_API OFP_Error_Msg : public ::Open_Flow_Message
{
  protected:
    uint16_t type_var;
    uint16_t code_var;

  private:
    void copy(const OFP_Error_Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Error_Msg&);

  public:
    OFP_Error_Msg(const char *name=NULL, int kind=0);
    OFP_Error_Msg(const OFP_Error_Msg& other);
    virtual ~OFP_Error_Msg();
    OFP_Error_Msg& operator=(const OFP_Error_Msg& other);
    virtual OFP_Error_Msg *dup() const {return new OFP_Error_Msg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16_t getType() const;
    virtual void setType(uint16_t type);
    virtual uint16_t getCode() const;
    virtual void setCode(uint16_t code);
};

inline void doPacking(cCommBuffer *b, OFP_Error_Msg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OFP_Error_Msg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OFP_ERROR_MSG_M_H_

