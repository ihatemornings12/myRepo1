//
// Generated file, do not edit! Created by nedtool 4.6 from ofomnet/openflow/messages/OFP_Flow_Removed.msg.
//

#ifndef _OFP_FLOW_REMOVED_M_H_
#define _OFP_FLOW_REMOVED_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
    #include "openflow.h"
    #include "Open_Flow_Message_m.h"
// }}

/**
 * Class generated from <tt>ofomnet/openflow/messages/OFP_Flow_Removed.msg:13</tt> by nedtool.
 * <pre>
 * //When a flow enty expires or is deleted, the switch informs the controller.
 * packet OFP_Flow_Removed extends Open_Flow_Message
 * {
 *     int datapath_id;		// Datapath unique ID. The lower 48-bits are for a MAC address,
 *     					   	// while the upper 16-bits are implementer-defined.
 *     uint8_t reason; 		//Reason flow has been expired (one of OFPR_*) 
 *     uint32_t packet_count;
 *     oxm_basic_match match;
 *     uint16_t idle_timeout; // Idle time before discarding (seconds). 
 *     uint16_t hard_timeout; // Max time before discarding (seconds). 
 *     uint16_t priority; // Priority level of flow entry. 
 * }
 * </pre>
 */
class INET_API OFP_Flow_Removed : public ::Open_Flow_Message
{
  protected:
    int datapath_id_var;
    uint8_t reason_var;
    uint32_t packet_count_var;
    oxm_basic_match match_var;
    uint16_t idle_timeout_var;
    uint16_t hard_timeout_var;
    uint16_t priority_var;

  private:
    void copy(const OFP_Flow_Removed& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Flow_Removed&);

  public:
    OFP_Flow_Removed(const char *name=NULL, int kind=0);
    OFP_Flow_Removed(const OFP_Flow_Removed& other);
    virtual ~OFP_Flow_Removed();
    OFP_Flow_Removed& operator=(const OFP_Flow_Removed& other);
    virtual OFP_Flow_Removed *dup() const {return new OFP_Flow_Removed(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDatapath_id() const;
    virtual void setDatapath_id(int datapath_id);
    virtual uint8_t getReason() const;
    virtual void setReason(uint8_t reason);
    virtual uint32_t getPacket_count() const;
    virtual void setPacket_count(uint32_t packet_count);
    virtual oxm_basic_match& getMatch();
    virtual const oxm_basic_match& getMatch() const {return const_cast<OFP_Flow_Removed*>(this)->getMatch();}
    virtual void setMatch(const oxm_basic_match& match);
    virtual uint16_t getIdle_timeout() const;
    virtual void setIdle_timeout(uint16_t idle_timeout);
    virtual uint16_t getHard_timeout() const;
    virtual void setHard_timeout(uint16_t hard_timeout);
    virtual uint16_t getPriority() const;
    virtual void setPriority(uint16_t priority);
};

inline void doPacking(cCommBuffer *b, OFP_Flow_Removed& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OFP_Flow_Removed& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OFP_FLOW_REMOVED_M_H_

