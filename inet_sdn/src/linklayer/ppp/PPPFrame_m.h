//
// Generated file, do not edit! Created by nedtool 4.6 from linklayer/ppp/PPPFrame.msg.
//

#ifndef _PPPFRAME_M_H_
#define _PPPFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



// cplusplus {{
#include "INETDefs.h"
const int PPP_OVERHEAD_BYTES = 7;
// }}

/**
 * Class generated from <tt>linklayer/ppp/PPPFrame.msg:44</tt> by nedtool.
 * <pre>
 * //
 * // PPP frame.
 * //
 * // Constant-value header fields are not modelled:
 * // Flag (=0x7e), address (=0xff), control (=0x03), CRC (bitError())
 * //
 * // CRC is modelled only via cMessage's bit error attribute.
 * //
 * // Protocol field is not modelled because types of encapsulated messages
 * // wil be determined from their class (using C++ dynamic_cast).
 * //
 * packet PPPFrame
 * {
 * }
 * </pre>
 */
class INET_API PPPFrame : public ::cPacket
{
  protected:

  private:
    void copy(const PPPFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PPPFrame&);

  public:
    PPPFrame(const char *name=NULL, int kind=0);
    PPPFrame(const PPPFrame& other);
    virtual ~PPPFrame();
    PPPFrame& operator=(const PPPFrame& other);
    virtual PPPFrame *dup() const {return new PPPFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PPPFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PPPFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PPPFRAME_M_H_

